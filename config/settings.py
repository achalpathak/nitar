"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

SECRET_KEY = os.environ["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
if os.environ.get("MODE") == "PROD":
    DEBUG = False
else:
    DEBUG = True

ALLOWED_HOSTS = ["*"]
SESSION_COOKIE_AGE = 60 * 60 * 24  #! Expires in 24 hours


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders",
    # apps
    "users",
    "settings",
    "library",
    "payments",
    "django_cleanup.apps.CleanupConfig",  # NOTE=> should be placed as the last app
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "config.middleware.Error500ResponseLogger",  # NOTE=> should be placed as the last middleware
]

ROOT_URLCONF = "config.urls"


WSGI_APPLICATION = "config.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.TokenAuthentication",  # <-- And here
    ],
}

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Kolkata"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/


# Base url to serve media files
MEDIA_URL = "/media/"
# Path where media is stored
MEDIA_ROOT = os.path.join(BASE_DIR, "media/")

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "users.User"

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CSRF_COOKIE_SAMESITE = "Strict"

# Enable on https servers
# CSRF_COOKIE_SECURE = True
# SESSION_COOKIE_SECURE = True

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

RAZORPAY_KEY_ID = os.environ.get("RAZORPAY_KEY_ID")
RAZORPAY_KEY_SECRET = os.environ.get("RAZORPAY_KEY_SECRET")

STRIPE_PUBLISHABLE_KEY = os.environ.get("STRIPE_PUBLISHABLE_KEY")
STRIPE_SECRET_KEY = os.environ.get("STRIPE_SECRET_KEY")

try:
    if os.environ.get("MODE") == "PROD":
        print("[*] Importing PROD settings")
        from .prod_settings import *
    else:
        print("[*] Importing LOCAL settings")
        from .local_settings import *
except Exception as e:
    raise Exception("[X] Error in importing settings : ", e)

###### GOOGLE AUTHENTICATION ######
# "openid", "email", "profile" => required scopes
GOOGLE_DTO = {
    "client_id": os.environ.get("GOOGLE_CLIENT_ID"),
    "client_secret": os.environ.get("GOOGLE_CLIENT_SECRET"),
    "android_client_id": os.environ.get("GOOGLE_ANDROID_CLIENT_ID"),
    "authorization_url": "https://accounts.google.com/o/oauth2/v2/auth?access_type=offline&prompt=consent",
    "token_url": "https://oauth2.googleapis.com/token",
    "userinfo_url": "https://openidconnect.googleapis.com/v1/userinfo",
    "redirect_url": "http://localhost/backend/api/users/google_callback/",
}
###################################

EMAIL_AUTH_KEY = os.environ.get("EMAIL_AUTH_KEY")
EMAIL_OTP_TEMPLATE_ID = os.environ.get("EMAIL_OTP_TEMPLATE_ID")
EMAIL_FORGOT_PASSWORD_TEMPLATE_ID = os.environ.get("EMAIL_FORGOT_PASSWORD_TEMPLATE_ID")


SMS_AUTH_KEY = os.environ.get("SMS_AUTH_KEY")
SMS_SENDER_ID = os.environ.get("SMS_SENDER_ID")

############# PAYTM CREDS #############
if os.environ.get("MODE") != "PROD":
    PAYTM_DOMAIN = "https://securegw-stage.paytm.in"
else:
    PAYTM_DOMAIN = "https://securegw.paytm.in"
    
PAYTM_DTO = {
    "merchant_key": os.environ.get("PAYTM_MERCHANT_ID"),
    "secret_key": os.environ.get("PAYTM_SECRET_KEY"),
    "website": os.environ.get("PAYTM_WEBSITE"),
    "channel_id": os.environ.get("PAYTM_CHANNEL_ID"),
    "industry_type_id": os.environ.get("PAYTM_INDUSTRY_TYPE_ID"),
    "payment_initiate_url": "%s/theia/api/v1/initiateTransaction?mid=%s&orderId=%s",
}
